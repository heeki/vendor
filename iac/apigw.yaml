AWSTemplateFormatVersion: '2010-09-09'
Description: IDL vendor services
Transform: AWS::Serverless-2016-10-31
Globals:
  Api:
    OpenApiVersion: 3.0.1
  Function:
    Layers:
      - !Sub 'arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14'
    Runtime: python3.9
    Timeout: 60
    # Tracing: Active
Parameters:
  pApiStage:
    Type: String
  pPayloadVersion:
    Type: String
  pCognitoUserPool:
    Type: String
  pVendorTable:
    Type: String
  pRequestorRole:
    Type: String
  pRequestorRegion:
    Type: String
  pRequestorLayer:
    Type: String
  pPOQueueUrl:
    Type: String
Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiLogGroup.Arn
        Format: '{"requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength"}'
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./openapi.yaml
      EndpointConfiguration:
        Type: REGIONAL
      StageName: !Ref pApiStage
      # TracingEnabled: True
  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/idl-vendor-api-${Api}"
      RetentionInDays: 7
  # Lambda
  FnExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/service-role/'
      Policies:
        - PolicyName: cloudwatch-logs-1
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: '*'
        - PolicyName: cloudwatch-logs-2
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: 'arn:aws:logs:*:*:log-group:*:*'
        - PolicyName: selling-partner-permissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: !Ref pRequestorRole
        - PolicyName: sqs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !Join [':', ['arn:aws:sqs:*', !Select [3, !Split ['/', !Ref pPOQueueUrl]], !Select [4, !Split ['/', !Ref pPOQueueUrl]]]]
  FnVendor:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src
      Handler: fn_vendor.handler
      Role: !GetAtt FnExecRole.Arn
      Environment:
        Variables:
          REQUESTOR_ROLE: !Ref pRequestorRole
          REQUESTOR_REGION: !Ref pRequestorRegion
          REQUESTOR_SERVICE: execute-api
          VENDOR_TABLE: !Ref pVendorTable
          PO_QUEUE_URL: !Ref pPOQueueUrl
      Layers:
        - !Ref pRequestorLayer
  FnVendorLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${FnVendor}"
      RetentionInDays: 7
  FnVendorPerm:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt FnVendor.Arn
      Principal: apigateway.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/*'
Outputs:
  outApi:
    Value: !Ref Api
  outUrl:
    Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${pApiStage}'
  outFnVendor:
    Value: !Ref FnVendor
